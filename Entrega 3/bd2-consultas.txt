parte 2
5. 
use vaccination
db.nurses.insert({name:"Morella Crespo", experience:9})
db.nurses.find().pretty() devuelve, adem치s de los datos insertados, el campo _id que se genera autom치ticamente.

6.
db.nurses.insert([{name:"Gale Molina", experience:8, vaccines:["AZ", "Moderna"]}, {name:"Honoria Fern치ndez", experience:5, vaccines:["Pfizer", "Moderna", "Sputnik V"]}, {name:"Gonzalo Gallardo", experience:3}, {name:"Altea Parra", experience:8, vaccines:["Pfizer"]}])

6.a) 
db.nurses.find({experience: {$lte: 5}})

6.b) 
db.nurses.find({vaccines: "Pfizer"})

6.c) 
db.nurses.find({vaccines: {$exists: false}})

6.d) 
db.nurses.find({name: {$regex: /Fern치ndez$/ }})

6.e) 
db.nurses.find({experience: {$gte: 6}, vaccines: "Moderna"})

6.f) 
db.nurses.find({experience: {$gte: 6}, vaccines: "Moderna"}, {_id:0, name:1})

7. 
db.nurses.updateOne({name:"Gale Molina"}, {$set: {experience: 9}})

8. 
db.nurses.updateOne({name:"Gonzalo Gallardo"}, {$set: {vaccines: []}})

9. 
db.nurses.updateOne({name:"Altea Parra"}, {$push: {vaccines: "AZ"}})

10. 
db.nurses.updateMany({vaccines: "Pfizer"}, {$mul: {experience: 2}})


parte 3

11.
db.doses.getIndexes()

12.
sin indice:
db.doses.find({"nurse":/11/}).explain("executionStats")

con indice:
db.doses.createIndex({nurse:1})
db.doses.find({"nurse":/11/}).explain("executionStats")

13.
creacion de variable caba
caba= ({
 "type":"MultiPolygon",
 "coordinates":[[[
   [-58.46305847167969,-34.53456089748654],
   [-58.49979400634765,-34.54983198845187],
   [-58.532066345214844,-34.614561581608186],
   [-58.528633117675774,-34.6538270014492],
   [-58.48674774169922,-34.68742794931483],
   [-58.479881286621094,-34.68206400648744],
   [-58.46855163574218,-34.65297974261105],
   [-58.465118408203125,-34.64733112904415],
   [-58.4585952758789,-34.63998735602951],
   [-58.45344543457032,-34.63603274732642],
   [-58.447265625,-34.63575026806082],
   [-58.438339233398445,-34.63038297923296],
   [-58.38100433349609,-34.62162507826766],
   [-58.38237762451171,-34.59251960889388],
   [-58.378944396972656,-34.5843230246475],
   [-58.46305847167969,-34.53456089748654]
 ]]]
})
db.patiens.find({address: {$goeWithin: {$geometry: caba}}}).explain("executionStats")

creacion de indice:
db.patients.createIndex({address: "2dsphere"})

parte 4:

14.
db.patients.aggregate([ { $sample: {size:5} }]).pretty()

15. 
db.patients.aggregate([{$geoNear: {near: {type: "point", coordinates:[-58.4586,-34.5968]}, distanceField:"dist", maxDistance:1000, spherical:true}},{$out:"patientsInCaba"}])

16.
db.patientsInCaba.aggregate([{
 $lookup: {
  from: 'doses',
  localField: 'name',
  foreignField: 'patient',
  as: 'dosesNearCaba'
 }
}, {
 $project: {
  _id: 1,
  name: 1,
  dosesNearCaba: 1
 }
}, {
 $unwind: {
  path: '$dosesNearCaba'
 }
}, {
 $replaceRoot: {
  newRoot: '$dosesNearCaba'
 }
},{$out:"appliedDose"}])
17.
db.nurses.aggregate([{ $match: { name: { $regex: '111' } } }, { $addFields: { doses: [] } }, { $lookup: { from: 'doses', localField: 'name', foreignField: 'nurse', as: 'doses', pipeline: [ { $match: { date: { $gt: ISODate('2021-05-01') } } } ] } }, { $out: 'nurses_punto17' }])